name: Build & Release Honor8x 4.9 Kernel

on:
  workflow_dispatch:          # 手动触发
  push:
    branches: [ main ]

env:
  # ===== 仅需按自己仓库改动 =====
  KERNEL_SOURCE_URL: https://github.com/UEFI233/android_device_huawei_honor8x.git
  KERNEL_SOURCE_BRANCH: EMUI9.1-sukiultra
  DEFCONFIG: merge_kirin710_defconfig
  ARCH: arm64
  CROSS_COMPILE: aarch64-linux-android-
  TOOLCHAIN_URL: https://github.com/Adrilaw/aarch64-linux-android-4.9-toolchain.git
  TOOLCHAIN_BRANCH: master
  # ===== 打包脚本 & 参数 =====
  PACK_SCRIPT: tools/pack_kernerimage_cmd.sh   # 源码里自带的打包脚本路径
  RELEASE_TAG: latest-build                    # 发行版标签

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write            # 需要写权限才能上传 Release
    steps:
      - name: Install host deps & build Python2.7
        run: |
            sudo apt-get update
            sudo apt-get install -y build-essential bc bison flex libssl-dev libncurses5-dev \
                            libffi-dev zlib1g-dev libsqlite3-dev libreadline-dev \
                            libbz2-dev libgdbm-dev git wget bison flex     
            # 下载并编译 Python 2.7.18                
            cd /tmp
            wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
            tar xf Python-2.7.18.tgz
            cd Python-2.7.18                  
            ./configure --prefix=/usr/local --enable-unicode=ucs4
            make -j$(nproc)
            sudo make install
            # 把 python2.7 链成默认 python2              
            sudo ln -sf /usr/local/bin/python2.7 /usr/bin/python2                
            sudo ln -sf /usr/local/bin/python2.7 /usr/bin/python
            python --version
          
      - name: Clone toolchain
        run: |
            git clone --depth=1 $TOOLCHAIN_URL -b $TOOLCHAIN_BRANCH $HOME/toolchain
            echo "$HOME/toolchain/bin" >> $GITHUB_PATH

      - name: Clone kernel source
        run: |
          git clone --depth=1 $KERNEL_SOURCE_URL -b $KERNEL_SOURCE_BRANCH $HOME/kernel

      # ===== 提前生成 .config 并顺带把 host 工具编出来 =====
      - name: 预编译修复（补充dtc解析器生成）
        run: |
          # 修复Kconfig无效字符问题
          find . -name "Kconfig" -exec sed -i 's/[^[:print:]\t\n]//g' {} +
          # 手动生成dtc解析器代码（关键步骤）
          if [ ! -f "$HOME/kernel/scripts/dtc/dtc-parser.tab.c" ]; then
            bison -o $HOME/kernel/scripts/dtc/dtc-parser.tab.c -d $HOME/kernel/scripts/dtc/dtc-parser.y
            flex -o $HOME/kernel/scripts/dtc/dtc-lexer.lex.c $HOME/kernel/scripts/dtc/dtc-lexer.l
          fi
      - name: Patch KernelSU for GCC 4.9
        run: |
         cd $HOME/kernel
         sed -i '/-Wno-int-conversion/d' drivers/kernelsu/Makefile
          
      - name: Fix format specifiers in lcdkit
        run: |
          cd $HOME/kernel
          # 把 %zd 改成 %d（两处都在 lcdkit_panel_adaptor_hs.c）
          sed -i \
            -e 's/hbm_level=%zd/hbm_level=%d/g' \
            -e 's/ret=%zd/ret=%d/g' \
            drivers/devkit/lcdkit/lcdkit1.0/core/common/hisi/lcdkit_panel_adaptor_hs.c

      - name: Fix KernelSU & netfilter for 4.9
        run: |
          cd $HOME/kernel
          # 1. 补齐缺失头文件
          mkdir -p out/include/linux out/include/linux/netfilter
          cat > out/include/linux/netfilter/xt_mark.h <<'EOF'
          #ifndef _XT_MARK_H
          #define _XT_MARK_H
          #include <linux/types.h>
          struct xt_mark_tginfo2 { __u32 mark, mask; };
          struct xt_mark_mtinfo2 { __u32 mark, mask; __u8 invert; };
          #endif
          EOF
          cat > out/include/linux/netfilter/xt_connmark.h <<'EOF'
          #ifndef _XT_CONNMARK_H
          #define _XT_CONNMARK_H
          #include <linux/types.h>
          struct xt_connmark_tginfo2 { __u32 ctmark, ctmask; };
          struct xt_connmark_mtinfo2 { __u32 mark, mask; __u8 invert; };
          #endif
          EOF
          cat > out/include/linux/compiler_types.h <<'EOF'
          #ifndef _LINUX_COMPILER_TYPES_H
          #define _LINUX_COMPILER_TYPES_H
          #ifndef __KERNEL__
          #define __KERNEL__
          #endif
          #endif
          EOF

          # 2. KernelSU 原型修正
          sed -i -E 's/\b(void|extern void)\s+([_a-zA-Z][_a-zA-Z0-9]*) $$/\1 \2(void)/g' \
              drivers/kernelsu/*.h drivers/kernelsu/*.c

          # 3. 删除不存在的 MODULE_IMPORT_NS
          sed -i '/MODULE_IMPORT_NS/d' drivers/kernelsu/ksu.c

      - name: Build kernel
        run: |
          cd $HOME/kernel
          make O=out $DEFCONFIG
          make -j$(nproc) O=out \
            CROSS_COMPILE=$CROSS_COMPILE \
            ARCH=$ARCH \
            2>&1 | tee out/build.log

      - name: Check build result
        run: |
          if [ -f $HOME/kernel/out/arch/arm64/boot/Image.gz-dtb ]; then
            echo "✅ Build OK"
          else
            echo "❌ Build FAILED"
            grep -i "error:" $HOME/kernel/out/build.log || true
            exit 1
          fi

      - name: Pack kernel.img
        run: |
          cd $HOME/kernel
          cp out/arch/arm64/boot/Image.gz-dtb $(dirname $PACK_SCRIPT)/Image.gz
          bash $PACK_SCRIPT                      # 生成 kernel.img

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "Honor8x 4.9 Kernel Build"
          body: |
            Auto-built on ${{ github.sha }}  
            Toolchain: `aarch64-linux-android-4.9`
          files: |
            $HOME/kernel/kernel.img
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
