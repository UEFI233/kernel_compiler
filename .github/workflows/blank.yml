name: Build & Release Honor8x 4.9 Kernel

on:
  workflow_dispatch:          # 手动触发
  push:
    branches: [ main ]

env:
  # ===== 仅需按自己仓库改动 =====
  KERNEL_SOURCE_URL: https://github.com/UEFI233/android_device_huawei_honor8x.git
  KERNEL_SOURCE_BRANCH: EMUI9.1-sukiultra
  DEFCONFIG: merge_kirin710_defconfig
  ARCH: arm64
  CROSS_COMPILE: aarch64-linux-android-
  TOOLCHAIN_URL: https://github.com/Adrilaw/aarch64-linux-android-4.9-toolchain.git
  TOOLCHAIN_BRANCH: master
  # ===== 打包脚本 & 参数 =====
  PACK_SCRIPT: tools/pack_kernerimage_cmd.sh   # 源码里自带的打包脚本路径
  RELEASE_TAG: latest-build                    # 发行版标签
  PYTHON_CACHE_KEY: python2.7-ubuntu22-cache-v1   # 任意固定字符串即可
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write            # 需要写权限才能上传 Release
    steps:
      - name: Cache Python 2.7 build
        uses: actions/cache@v4
        id: cache-py27
        with:
          path: /usr/local
          key: ${{ env.PYTHON_CACHE_KEY }}      
      
      - name: Install host deps & build Python2.7
        if: steps.cache-py27.outputs.cache-hit != 'true'   # 关键：命中就跳过
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc bison flex libssl-dev libncurses5-dev \
                          libffi-dev zlib1g-dev libsqlite3-dev libreadline-dev \
                          libbz2-dev libgdbm-dev git wget bison flex
          cd /tmp
          wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
          tar xf Python-2.7.18.tgz
          cd Python-2.7.18
          ./configure --prefix=/usr/local --enable-unicode=ucs4
          make -j$(nproc)
          sudo make install
          sudo ln -sf /usr/local/bin/python2.7 /usr/bin/python2
          sudo ln -sf /usr/local/bin/python2.7 /usr/bin/python

      - name: Install pre-built Make 3.81
        run: |
          # 1. 下载官方 3.81 deb
          wget -q http://archive.ubuntu.com/ubuntu/pool/main/m/make-dfsg/make_3.81-8.2ubuntu3_amd64.deb
          # 2. 安装
          sudo dpkg -i make_3.81-8.2ubuntu3_amd64.deb
          # 3. 验证
          make --version | head -1
          
      - name: Clone toolchain
        run: |
            git clone --depth=1 $TOOLCHAIN_URL -b $TOOLCHAIN_BRANCH $HOME/toolchain
            echo "$HOME/toolchain/bin" >> $GITHUB_PATH

      - name: Clone kernel source
        run: |
          git clone --depth=1 $KERNEL_SOURCE_URL -b $KERNEL_SOURCE_BRANCH $HOME/kernel

      # ===== 提前生成 .config 并顺带把 host 工具编出来 =====
      - name: 预编译修复（补充dtc解析器生成）
        run: |
          # 修复Kconfig无效字符问题
          find . -name "Kconfig" -exec sed -i 's/[^[:print:]\t\n]//g' {} +
          # 手动生成dtc解析器代码（关键步骤）
          if [ ! -f "$HOME/kernel/scripts/dtc/dtc-parser.tab.c" ]; then
            bison -o $HOME/kernel/scripts/dtc/dtc-parser.tab.c -d $HOME/kernel/scripts/dtc/dtc-parser.y
            flex -o $HOME/kernel/scripts/dtc/dtc-lexer.lex.c $HOME/kernel/scripts/dtc/dtc-lexer.l
          fi
      - name: Patch KernelSU for GCC 4.9
        run: |
         cd $HOME/kernel
         sed -i '/-Wno-int-conversion/d' drivers/kernelsu/Makefile
          
      - name: Fix format specifiers in lcdkit
        run: |
          cd $HOME/kernel
          # 把 %zd 改成 %d（两处都在 lcdkit_panel_adaptor_hs.c）
          sed -i \
            -e 's/hbm_level=%zd/hbm_level=%d/g' \
            -e 's/ret=%zd/ret=%d/g' \
            drivers/devkit/lcdkit/lcdkit1.0/core/common/hisi/lcdkit_panel_adaptor_hs.c
      
      - name: Build kernel
        run: |
          cd $HOME/kernel
          make O=out ARCH=arm64 $DEFCONFIG
          export KBUILD_CFLAGS="-fno-stack-protector"
          make -j$(nproc) O=out \
            CROSS_COMPILE=$CROSS_COMPILE \
            ARCH=$ARCH \
            2>&1 | tee out/build.log

      - name: Generate Image.gz-dtb
        run: |
          set -e
          IMG_PATH="$HOME/kernel/out/arch/arm64/boot/Image.gz"
          DTB_DIR="$HOME/kernel/out/arch/arm64/boot/dts"
          DTB_MERGED_PATH="$HOME/kernel/out/arch/arm64/boot/Image.gz-dtb"

          # 1. 确保 Image.gz 存在
          [[ -f "$IMG_PATH" ]] || { echo "❌ Image.gz 不存在"; exit 1; }

          # 2. 找到所有 dtb（hisilicon 或通用路径）
          DTB_LIST=()
          while IFS= read -r -d '' f; do
            DTB_LIST+=("$f")
          done < <(find "$DTB_DIR" -type f -name '*.dtb' -print0)

          # 3. 合并
          if [[ ${#DTB_LIST[@]} -gt 0 ]]; then
            echo "✅ 发现 ${#DTB_LIST[@]} 个 dtb，正在合并..."
            cat "$IMG_PATH" "${DTB_LIST[@]}" > "$DTB_MERGED_PATH"
          else
            echo "⚠️ 未找到 dtb，直接使用 Image.gz"
            cp "$IMG_PATH" "$DTB_MERGED_PATH"
          fi

          # 4. 校验
          [[ -s "$DTB_MERGED_PATH" ]] || { echo "❌ 合并失败"; exit 1; }
          echo "✅ Image.gz-dtb 已生成：$(stat -c%s "$DTB_MERGED_PATH") 字节"

      - name: Export Image.gz on success or failure
        if: always()
        run: |
          IMG_SRC="$HOME/kernel/out/arch/arm64/boot/Image.gz"
          IMG_DST="$GITHUB_WORKSPACE/Image.gz"
          if [[ -f "$IMG_SRC" ]]; then
            cp "$IMG_SRC" "$IMG_DST"
            echo "✅ Image.gz 已复制到仓库根目录：$IMG_DST"
          else
            echo "⚠️ 未找到 Image.gz，跳过复制"
          fi

      - name: Pack kernel.img
        run: |
          cd $HOME/kernel
          cp out/arch/arm64/boot/Image.gz-dtb $(dirname $PACK_SCRIPT)/Image.gz
          bash $PACK_SCRIPT

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "Honor8x 4.9 Kernel Build"
          body: |
            Auto-built on ${{ github.sha }}  
            Toolchain: `aarch64-linux-android-4.9`
          files: |
            $HOME/kernel/kernel.img
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
