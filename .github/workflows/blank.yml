name: Build & Release Honor8x 4.9 Kernel

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  KERNEL_SOURCE_URL: https://github.com/UEFI233/android_device_huawei_honor8x.git
  KERNEL_SOURCE_BRANCH: EMUI9.1-sukiultra
  DEFCONFIG: merge_kirin710_defconfig
  ARCH: arm64
  CROSS_COMPILE: aarch64-linux-android-
  TOOLCHAIN_URL: https://github.com/Adrilaw/aarch64-linux-android-4.9-toolchain.git
  TOOLCHAIN_BRANCH: master
  PACK_SCRIPT: tools/pack_kernerimage_cmd.sh

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # ---------- 1. 缓存 ----------
      - name: Cache toolchain + Python + Make
        uses: actions/cache@v4
        id: big-cache
        with:
          path: |
            /usr/local
            $HOME/toolchain
          key: honor8x-kernel-${{ runner.os }}-gcc4.9-py27-make381-${{ hashFiles('**/README.md') }}

      # ---------- 2. 一次性安装 ----------
      - name: Install once
        if: steps.big-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y build-essential bc bison flex libssl-dev \
            libncurses5-dev libffi-dev zlib1g-dev libsqlite3-dev \
            libreadline-dev libbz2-dev libgdbm-dev git wget

          # Python 2.7.18
          cd /tmp
          wget -q https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
          tar xf Python-2.7.18.tgz
          cd Python-2.7.18
          ./configure --prefix=/usr/local --enable-unicode=ucs4 > /dev/null
          make -s -j$(nproc) && sudo make install -s
          sudo ln -sf /usr/local/bin/python2.7 /usr/bin/python

          # Make 3.81
          wget -q http://archive.ubuntu.com/ubuntu/pool/main/m/make-dfsg/make_3.81-8.2ubuntu3_amd64.deb
          sudo dpkg -i make_3.81-8.2ubuntu3_amd64.deb

          # Toolchain
          git clone --depth=1 $TOOLCHAIN_URL -b $TOOLCHAIN_BRANCH $HOME/toolchain
          echo "$HOME/toolchain/bin" >> $GITHUB_PATH

      # ---------- 3. 并行克隆 & 补丁 ----------
      - name: Clone & patch
        run: |
          git clone --depth=1 --filter=blob:none $KERNEL_SOURCE_URL \
                    -b $KERNEL_SOURCE_BRANCH $HOME/kernel
          cd $HOME/kernel
          # 修复 Kconfig 非法字符
          find . -name Kconfig -exec sed -i 's/[^[:print:]\t\n]//g' {} +
          # 禁用 lib/stackprot.c 避免重复符号
          sed -i '1i #if 0' lib/stackprot.c
          echo '#endif' >> lib/stackprot.c
          # lcdkit %zd → %d
          sed -i -e 's/%zd/%d/g' \
            drivers/devkit/lcdkit/lcdkit1.0/core/common/hisi/lcdkit_panel_adaptor_hs.c
          # KernelSU GCC4.9 兼容
          sed -i '/-Wno-int-conversion/d' drivers/kernelsu/Makefile

      # ---------- 4. 增量编译 ----------
      - name: Build kernel
        run: |
          cd $HOME/kernel
          make O=out ARCH=arm64 $DEFCONFIG
          make -j$(nproc) O=out \
            CROSS_COMPILE=$CROSS_COMPILE \
            ARCH=$ARCH \
            KBUILD_CFLAGS="-fno-stack-protector -w" \
            V=0

      # ---------- 5. 生成 Image.gz-dtb ----------
      - name: Generate Image.gz-dtb
        run: |
          set -e
          IMG="$HOME/kernel/out/arch/arm64/boot/Image.gz"
          DTB="$HOME/kernel/out/arch/arm64/boot/dts"
          OUT="$HOME/kernel/out/arch/arm64/boot/Image.gz-dtb"
          [[ -f $IMG ]] || { echo "❌ Image.gz missing"; exit 1; }
          DTBS=($(find "$DTB" -type f -name '*.dtb'))
          if [[ ${#DTBS[@]} -gt 0 ]]; then
            cat "$IMG" "${DTBS[@]}" > "$OUT"
          else
            cp "$IMG" "$OUT"
          fi
          ls -lh "$OUT"

      # ---------- 6. 打包 kernel.img ----------
      - name: Pack kernel.img
        run: |
          cd $HOME/kernel
          cp out/arch/arm64/boot/Image.gz-dtb tools/Image.gz
          chmod +x "$PACK_SCRIPT"
          bash "$PACK_SCRIPT"
          [[ -s kernel.img ]] || { echo "❌ kernel.img empty"; exit 1; }

      # ---------- 7. 生成日期标签 ----------
      - name: Create date tag
        id: date
        run: echo "TAG=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      # ---------- 8. 上传 Release ----------
      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.date.outputs.TAG }}
          name: "Honor8x Kernel ${{ steps.date.outputs.TAG }}"
          body: |
            Auto-built on ${{ github.sha }}  
            Toolchain: `aarch64-linux-android-4.9`
          files: /home/runner/kernel/kernel.img
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
